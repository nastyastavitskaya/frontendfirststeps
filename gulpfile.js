var  gulp = require('gulp');  concat = require('gulp-concat');  cssmin = require('gulp-cssmin');  uglify = require('gulp-uglify');  inject = require('gulp-inject');  runSequence = require('run-sequence');  del = require('del');  sass = require('gulp-sass');  babelify = require('babelify');  browserify = require('browserify');  buffer = require('vinyl-buffer');  source = require('vinyl-source-stream');  sourcemaps = require('gulp-sourcemaps');  connect = require('gulp-connect');  proxy = require('http-proxy-middleware');  parseArgs = require('minimist');  gulpif = require('gulp-if');  config = require('./config.json');  argv = parseArgs(process.argv.slice(2));  env = argv.production ? 'production' : 'development';gulp.task('app-styles', function(){  return gulp.src(config[env].appStyles.sources)    .pipe(sass())    .pipe(gulpif(config[env].appStyles.minify, cssmin()))    .pipe(concat(config[env].appStyles.output))    .pipe(gulp.dest(config[env].appStyles.dest))    .pipe(connect.reload());});gulp.task('vendor-styles', function(){  return gulp.src(config[env].vendorStyles.sources)    .pipe(gulpif(config[env].vendorStyles.minify, cssmin()))    .pipe(gulpif(config[env].vendorStyles.concat, concat(config[env].vendorStyles.output)))    .pipe(gulp.dest(config[env].vendorStyles.dest))    .pipe(connect.reload());});gulp.task('app-scripts', function(){  bundler = browserify({    entries: [config[env].appScripts.entriesSources],    debug: true  }).transform(babelify)  return bundler.bundle()    .pipe(source(config[env].appScripts.sources))    .pipe(buffer())    .pipe(sourcemaps.init({ loadMaps: true }))      .pipe(gulpif(config[env].appScripts.minify, uglify()))    .pipe(sourcemaps.write('./'))    .pipe(gulp.dest(config[env].appScripts.dest))    .pipe(connect.reload());});gulp.task('vendor-scripts', function(){  return gulp.src(config[env].vendorScripts.sources)    .pipe(gulpif(config[env].vendorScripts.minify, uglify()))    .pipe(gulpif(config[env].vendorScripts.concat, concat(config[env].vendorScripts.output)))    .pipe(gulp.dest(config[env].vendorScripts.dest))    .pipe(connect.reload());})gulp.task('index', function(){  gulp.src(config[env].index.mainSources)    .pipe(inject(gulp.src(config[env].index.sources, {read: false}), {ignorePath: ['build', 'temp'], addRootSlash: false }))    .pipe(inject(gulp.src(config[env].index.vendorSources, {read: false}), {starttag: '<!-- inject:head:{{ext}} -->', ignorePath: ['build', 'temp'], addRootSlash: false }))    .pipe(gulp.dest(config[env].index.dest))    .pipe(connect.reload());});gulp.task('clean', function(){  return del(config[env].clean.sources).then(console.log('Cleaned folder'));});gulp.task('build', function(){  runSequence('clean',              ['app-styles', 'app-scripts', 'vendor-styles', 'vendor-scripts'],              'index');});gulp.task('watch', function(){  gulp.watch(config[env].watch.stylesSources, ['app-styles']);  gulp.watch(config[env].watch.scriptsSources, ['app-scripts']);  gulp.watch(config[env].watch.indexSources, ['index']);});gulp.task('connect', function(){  connect.server({    root: config[env].connect.sources,    port: 5005,    livereload: true,    middleware: function(connect, opt){      return [        proxy('/api', {          target: 'http://localhost:3003',          changeOrigin: true,          ws: true        })      ]    }  });});gulp.task('default', function(){  require('./server.js');  runSequence('build',              ['connect', 'watch']);});